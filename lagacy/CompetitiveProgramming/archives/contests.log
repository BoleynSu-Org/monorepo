2012.11.17 Codeforces Round #150 (Div. 1)
#TODO

#A AC 64 mins
It can be solved by brute force algorithm, but I didn't found this until I solve this problem using binary search.

#B TLE 103 mins
It can be solved by burte force algorithm, and I did so. The reason why I got a TLE is that I didn't skip calculation when I can know it can't be the answer.

After the contest:
#B AC

Summary:
It is really important to find how difficult a problem really is as well as to come up with easy solutions to easy problems.



2012.11.17 USACO 2012 November Contest
#TODO

The problem A can be solved by DP.
The problem B can be solved by brute force algorithm with STL/map.
I tried C by burte force algorithm. But I made a mistake. I should have built a rooted tree.

After the contest:
I only passed all the test cases of problem A.
I passed only ONE test case of problem B because I used an incorrect conclusion to optimize my brute force algorithm. And I got AC when I corrected it.
However, I pass more test cases than I expected of problem C. I am think about the solution to it now.



2012.11.19 CROC-MBTU 2012, Elimination Round (ACM-ICPC)

#B AC 19 mins 1 wrong try
#A AC 21 mins
#D AC 30 mins
#E AC 36 mins
#F AC 93 mins 2 wrong tries

All the problems are simple.
I wasted a lot of time on #C which can be solved greedy(I missed a possiblity so I got WA all the time).

After the contest:
#C AC
#H AC
It can be solved by DP algorithm.
Let f[i][j] stand for whether s[i...j] is a palindrome(1 for yes, 0 for no).
Let g[i][j] stand for the number of palindromes in range [i,j].
Then f[i][j]=f[i+1][j-1]+(if s[i]=s[j] 1, otherwise 0) and if (i>j) f[i][j]=0;
g[i][j]=g[i+1][j]+g[i][j-1]-g[i+1][j-1]+f[i][j] and if (i>j) g[i][j]=0.
#G AC
It can be solved by brute force algorithm.



2012.11.21 Codeforces Round #151 (Div. 2)

#A AC 5 mins
#B AC 10 mins
#D AC 36 mins 4 wrong tries
It is a simple problem. I got lots of WA because I didn't correctly output for edge cases.
#C AC 86 mins 5 wrong tries
It can be solved by constructive algorithm. But I solved it by DP, and wasted lots of time.

After the consest:
#E AC



2012.11.26 CROC-MBTU 2012, Final Round (Online version, Div. 2)

#A AC 10 mins
Implementation
#B AC 26 mins
Implementation
#C AC 37 mins
Implementation
#D TLE 69 mins 1 wrong try
For a certain i, let's define F[j] = L[i]+sqrt((a-b)^2+(A[j]-B[i])^2)+sqrt(a^2+A[j]^2) ,and we'll find that F[j] depends only on A[j].
Let's assume A is in ascending order, then there will be a k satisfying that for each j less than k, F[j] is not less than F[j-1] and for each j greater than k, F[j] is not less than F[j+1].
We can calculate k for each i by binary search, and by doing so we will get the min{F[j]} for each i, let's call it G[i].
The answer will be min{G[i]}.
#E AC 105 mins 2 wrong tries
Implementation

After the contest:
#D AC
I should have solved this problem during the contest, but I got TLE because I used cin without calling sync_with_stdio(false).



2012.12.07 Codeforces Round #153 (Div. 1)

#A AC 5 mins
For each index i, let f[i] be the min index satisfying x[i]-x[f[j]]<=d. The answer will be sum{(i-f[i])*(i-f[i]-1)/2;i= 1 to n}.
F[i] can be calculated by binary search or two pointers method.

#B AC 61 mins 2 wrong tries
It can be solved by brute force algorithm.
I misunderstood the problem, so I had 2 wrong tries.

#C AC 113 mins 2 wrong tries
All numbers can be divided into lcm{i;i=2 to k} classes.
Let n=lcm{i;i=2 to k}.Then there will be n classes, if a=b(mod n) then a and b belong to the same class.
Let n*i+a belongs to [a] for each i.
Then there will be edges from [a] to [a-a%i] (i=2 to k) and also a edge from [a] to [a-1] if a>0 or from [a] to [n-1] if a=0.
We can see that only if we start at [0] can we arrive at [n-1] and if we go from [i], after some step we must arrive at [0]. 
Let a=ca*n+s, b=cb*n+t.
If ca=cb, the answer will be the shortest path from [s] to [t];
If ca>cb, we must go from [s] to [0], from [0] to [n-1], from [n-1] to [0] ... from [0] to [n-1], from [n-1] to [0], from [0] to [n-1], from [n-1] to [t], so the answer will be d[s,0]+(ca-cb-1)*(d[n-1,0]+1)+1+d[n-1,t] (d[i,j]=the length of the shortest path from [i] to [j]).



2012.12.09 Codeforces Round #155 (Div. 2)
#A AC 10 mins
#C AC 58 mins 4 wrong tries
#B AC 69 mins
#E AC 96 mins



2012.12.16 Codeforces Round #156 (Div. 1)

#A AC 23 mins
DP
#B WA 54 mins
Math and binary search
I got WA because my upper bound for binary search is too low.
#C TLE 102 mins 3 wrong tries
Game theory
I got TLE because I forgot to use long long int instead of int.

After the contest:
#B AC
#C AC
#E AC
DP and segment tree



2012.12.21 TopCoder SRM 565

#A cha
DP
My solution was challenged because I made a mistake. I should have used >=, but I used > instead.
#B cha
Game theory
My solution was challenged because I forgot to delete codes for debug.

After the contest:
#A AC
#B AC



2012.12.22 Codeforces Round #157 (Div. 1)

#A AC 15 mins
Greedy
#C AC 84 mins 1 wrong try
Math

After the contest:
#B AC
DP
#E AC
DFS and segment tree 



2012.12.27 Codeforces Round #158 (Div. 2)

#A AC 8 mins
#B AC 104 mins 2 wrong tries
#D AC 90 mins 2 wrong tries

After the contest:
#C AC
#E AC



2013.01.05 Open Ural FU Personal Contest 2012
#A AC 64 mins 3 wrong tries
#B AC 108 mins 2 wrong tries
#D AC 117 mins
#C AC 98 mins 5 wrong tries
Brute force
#H AC 230 mins 7 wrong tries
Math

After the contest:
#F AC
DP
#I AC
Max-flow
#J AC
Math



2013.01.08 Codeforces Round #159 (Div. 2)
#A AC 8 mins
#B AC 23 mins
#C AC 39 mins 1 wrong try
#D AC 54 mins

After the contest:
#E AC



2013.01.12 Codeforces Testing Round #5
#A AC 9 mins
#B AC 50 mins 2 wrong tries
Euler circuit

After the contest:
#C AC
This problem is really interesting. When I read it, I thought it was a max flow problem, and then I thought it was a shortest path problem. However, it turned out to be a problem solved by solving linear equations.
Because "for any pair of junctions (x,â€‰y) the sum of traffics along any path from x to y doesn't change depending on the choice of the path", we can define H[x] for each node x, let H[x]-H[y] = the flow from y to x, then sum{H[x]-H[y]|y in neighbors of x} = 0 for each node x except 1 and n. If we let H[1]=0 and H[n]= a big enough number, then we can calculate H[x] for each x. After that, we can check whether |H[x]-H[y]| <= the capacity of the road connecting x and y, if not, we can let every H[x]=H[x]*(the capacity)/abs(H[x]-H[y]).



2013.01.13 Codeforces Round #160 (Div. 1)
#A AC 8 mins
greedy
#B AC 48 mins
DP
#C AC 105 mins 1 wrong try
DP



2013.01.13 TopCoder SRM 566
#A AC

After the contest:
#B AC
DP and fast modular exponentiation of matrix
We can compress the matrix to a row because the feature of the matrix to reduce the calculation.



2013.01.21 TopCoder SRM 567
#A AC
Math



2013.01.28 Codeforces Round #164 (Div. 2)
#A AC 5 mins
#B AC 22 mins
#C AC 31 mins
#E AC 54 mins



2013.01.30 TopCoder SRM 568
#A AC



2013.02.01 Codeforces Round #165 (Div. 1)



2013.02.11 Codeforces Round #166 (Div. 2)



2013.02.13 Codeforces Round #167 (Div. 1)



2013.02.13 TopCoder SRM 570



2013.02.20 Codeforces Round #168 (Div. 1)



2013.02.24 TopCoder TCO13 Round 1A



2013.02.24 Codeforces Round #169 (Div. 2)



2013.02.28 Codeforces Round #170 (Div. 1)



2013.03.04 Codeforces Round #171 (Div. 2)



2013.03.10 Codeforces Round #172 (Div. 1)



